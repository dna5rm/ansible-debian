#!/bin/env -S ansible-playbook -i inventory
---
- name: manage debian host
  hosts: ["cloud","debian"]
  become: yes
  gather_facts: false

  pre_tasks:

    - name: Fail if network device
      ansible.builtin.fail:
      no_log: true
      when: ansible_network_os is defined

    - name: Bootstrap system for Ansible
      block:
        - name: Gather Facts
          ansible.builtin.setup:
      rescue:
        - name: Raw install python3
          ansible.builtin.raw: test -e /usr/bin/python3 || ( apt update && apt install python3 -y )
        - name: Gather Facts
          ansible.builtin.setup:

  tasks:

    - name: Fail if not Debian
      ansible.builtin.fail:
        msg: "System is not running Debian!"
      no_log: true
      when: ansible_distribution != "Debian"

#    - ansible.builtin.debug:
#        msg: "{{ ansible_distribution_major_version }}"
#    - meta: end_play

    - name: Set hostname
      ansible.builtin.hostname:
        name: "{{ inventory_hostname }}"

    - name: User accounts
      ansible.builtin.user:
        name: "{{ item.name }}"
        shell: "{{ item.shell | default('/bin/bash') }}"
        uid: "{{ item.uid | default('1000') }}"
        group: "{{ item.group | default('users') }}"
        groups: "{{ item.groups | default('users') }}"
        state: "{{ item.state | default('present')}}"
      loop: "{{ users }}"
      when: item.key is defined

    - name: User authorized_keys
      ansible.builtin.authorized_key:
        user: "{{ item.name }}"
        key: "{{ item.key }}"
      loop: "{{ users }}"
      when: item.key is defined

    - name: User .bootstrap
      ansible.builtin.copy:
        content: "{{ lookup('file', 'bootstrap.' + item.name, errors='ignore') | default() }}"
        dest: "/home/{{ item.name }}/.bootstrap"
        owner: "{{ item.name }}"
        group: root
        mode: '0600'
      loop: "{{ users }}"

    - name: /opt/bootstrap.sh
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/dna5rm/dna5rm/master/bootstrap.sh
        dest: /opt/bootstrap.sh
        owner: root
        group: root
        mode: '0755'

    - name: Update debian repositories
      ansible.builtin.replace:
        dest: /etc/apt/sources.list
        regexp: '^(deb.+)(?<! contrib non-free)$'
        replace: '\1 contrib non-free'

    - name: Install debian packages
      ansible.builtin.apt:
        pkg:
          - atomicparsley
          - apt-transport-https
          - bc
          - build-essential
          - cargo
          - certbot
          - cmake
          - command-not-found
          - cron-apt
          - cryptsetup
          - curl
          - dialog
          - ethtool
          - exiftool
          - expect
          - fdupes
          - ffmpeg
          - file
          - finger
          - fping
          - fortune
          - git
          - golang
          - hdparm
          - htop
          - hwinfo
          - imagemagick
          - ipcalc
          - ipset
          - j2cli
          - jq
          - ladvd
          - libffi-dev
          - librrd-dev
          - libssl-dev
          - lsof
          - man-db
          - mmdb-bin
          - moreutils
          - mtr-tiny
          - needrestart
          - neofetch
          - neovim
          - net-tools
          - nfs-common
          - nmap
          - nodejs
          - npm
          - p7zip
          - pdfgrep
          - psmisc
          - pup
          - python3-dev
          - python3-venv
          - recode
          - rrdtool
          - rsync
          - screen
          - snapd
          - sqlite3
          - sshfs
          - steghide
          - sudo
          - tcpdump
          - toilet
          - ufw
          - unzip
          - uuid
          - vim
          - wget
          - whois
        update_cache: true
      when: (ansible_distribution_major_version | int > 10) or (ansible_distribution_major_version == "unstable")

    - name: /etc/cron-apt/action.d/5-upgrade
      ansible.builtin.copy:
        dest: "/etc/cron-apt/action.d/5-upgrade"
        owner: root
        group: root
        mode: '0644'
        content: "dist-upgrade -y"

    - name: /etc/cron-apt/action.d/6-needrestart
      ansible.builtin.copy:
        dest: "/etc/cron-apt/action.d/6-needrestart"
        owner: root
        group: root
        mode: '0644'
        content: ""

    - name: /etc/sudoers
      ansible.builtin.lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%sudo'
        line: '%sudo ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: Disable root password
      ansible.builtin.user:
        name: root
        password: '!'

    - name: Stat GeoLite2-Country.mmdb
      local_action:
        module: ansible.builtin.stat
        path: /var/lib/GeoIP/GeoLite2-Country.mmdb
      register: GeoIP

    - name: /var/lib/GeoIP/GeoLite2-Country.mmdb
      ansible.builtin.copy:
        src: /var/lib/GeoIP/GeoLite2-Country.mmdb
        dest: /opt/GeoLite2-Country.mmdb
      when: GeoIP.stat.exists

    - name: /opt/geowrapper.sh
      ansible.builtin.copy:
        src: geowrapper.sh
        dest: /opt/geowrapper.sh
        owner: root
        group: root
        mode: '0755'

    - block:
        - name: /etc/hosts.allow w/SSH_CLIENT
          ansible.builtin.copy:
            content: |
              ALL: {{ mgmt_safety | default('[::1]') }}
              ALL: {{ ansible_env.SSH_CLIENT.split(' ')[0] | ansible.utils.ipwrap }}
              ALL: ALL: aclexec /opt/geowrapper.sh %a
            dest: /etc/hosts.allow
            owner: root
            group: root
            mode: '0644'
      rescue:
        - name: /etc/hosts.allow
          ansible.builtin.copy:
            content: |
              ALL: {{ mgmt_safety | default('[::1]') }}
              ALL: ALL: aclexec /opt/geowrapper.sh %a
            dest: /etc/hosts.allow
            owner: root
            group: root
            mode: '0644'
      always:
        - name: /etc/hosts.deny paranoid
          ansible.builtin.copy:
            content: |
              ALL: PARANOID
            dest: /etc/hosts.deny
            owner: root
            group: root
            mode: '0644'

    - name: Include optional task lists
      block:
        - ansible.builtin.include_tasks: debian_interfaces.yaml
        - ansible.builtin.include_tasks: debian_ufw.yaml
        - ansible.builtin.include_tasks: debian_bastion.yaml
        - ansible.builtin.include_tasks: debian_syncthing.yaml
          when: inventory_hostname not in groups["cloud"]
        - ansible.builtin.include_tasks: debian_router.yaml
      always:
        - ansible.builtin.include_tasks: debian_cleanup.yaml
      when: (ansible_distribution_major_version | int > 10) or (ansible_distribution_major_version == "unstable")

  handlers:

    - name: reload strongswan
      ansible.builtin.command: ipsec reload 2>&1

    - name: restart network
      ansible.builtin.service:
        name: networking
        state: restarted

    - name: restart dhcpd
      ansible.builtin.service:
        name: isc-dhcp-server
        state: restarted

    - name: restart frr
      ansible.builtin.service:
        name: frr
        state: restarted

    - name: restart radvd
      ansible.builtin.service:
        name: radvd
        state: restarted

    - name: restart snmpd
      ansible.builtin.service:
        name: snmpd
        state: restarted

    - name: restart sshd
      ansible.builtin.service:
        name: sshd
        state: restarted

    - name: restart ufw
      ansible.builtin.service:
        name: ufw
        state: restarted

    - name: network services
      ansible.builtin.service:
        name: "{{ item }}"
        state: "started"
        enabled: true
      loop:
        - isc-dhcp-server
        - frr
        - radvd
        - snmpd
        - strongswan-starter
